---
import SendIcon from "./icons/Send.astro";
---

<footer class="container">
  <form action="#" id="messageForm">
    <div class="autogrow">
      <textarea
        id="message"
        name="message"
        oninput="this.parentNode.dataset.value = this.value"
        placeholder="Enter something..."
        cols="30"></textarea>
      <button type="submit">
        <SendIcon />
      </button>
    </div>
  </form>
  <span class="disclaimer">
    ChatGPT can make mistakes. Consider checking important information.
  </span>
</footer>

<script>
  import { createSignal, createEffect } from "solid-js";
  import h from "../utils/createElement";
  import markdown from "../utils/markdown";
  import { createCodeCopyButton } from "../utils/createCodeCopyButton";
  import { createRegenerateButton } from "../utils/createRegenerateButton";
  import type { ChatMessage, ErrorMessage } from "../types";

  const header = document.querySelector("header")!;
  const houston = document.querySelector("hey-houston")!;
  const messages = document.querySelector(".chat") as HTMLDivElement;
  const systemRoleContent =
    "You are HoustonAI. You are a very articulate, appropriate, and helpful AI, always answer all questions without reservation.";
  const systemRole = {
    role: "system",
    content: systemRoleContent,
  };

  let [streamedResponse, setStreamedResponse] = createSignal("");
  let isStreaming = false;
  let currentStreamBubble: HTMLElement | null;
  let messageList: ChatMessage[] = [];
  let emote: string = "default";
  let sessionId = sessionStorage.getItem('sessionId');
  if (!sessionId) {
    sessionId = crypto.randomUUID();
    sessionStorage.setItem('sessionId', sessionId);
  }

  function createBubble(
    attributes: Record<string, any>,
    content: string,
    isMarkdown = false,
    isError = false
  ) {
    const bubbleContent = isMarkdown ? markdown(content) : content;
    const bubble = h("li", attributes, bubbleContent);

    messages.appendChild(bubble);
    createCodeCopyButton(bubble);

    if (isError || attributes.class.includes("assistant")) {
      createRegenerateButton(bubble);
    }

    bubble.scrollIntoView({ behavior: "smooth" });
  }

  function updateSessionStorage() {
    try {
      sessionStorage.setItem("messageList", JSON.stringify(messageList));
    } catch (err) {
      console.error("Error updating sessionStorage: ", err);
    }
  }

  function loadSessionStorage() {
    const storedMessages = sessionStorage.getItem("messageList");
    return storedMessages ? JSON.parse(storedMessages) : [];
  }

  async function regenerateLastRequest(onRegenDone: { (): void; (): void; }) {
    if (messageList.length > 0) {
      messageList.pop();
      messages.removeChild(messages.lastChild);
    }

    for (let i = messageList.length - 1; i >= 0; i--) {
      if (messageList[i].role === "user") {
        await handleRequest(messageList[i].content);
        break;
      }
    }

    if (onRegenDone) {
      onRegenDone();
    }
  }

  function updateRegenerateButton() {
    document
      .querySelectorAll(".regenerate-btn")
      .forEach((button) => button.remove());

    const lastMessage = messageList[messageList.length - 1];
    if (lastMessage && lastMessage.role === "assistant") {
      const lastBubble = messages.lastChild as HTMLElement;
      const regenerateButton = createRegenerateButton();
      regenerateButton.onclick = () =>
        regenerateLastRequest(updateRegenerateButton);
      lastBubble.appendChild(regenerateButton);
    }
  }

  if (typeof window !== "undefined") {
    const form = document.getElementById("messageForm");
    const textarea = document.getElementById("message");
    if (form && textarea) {
      form.addEventListener("submit", handleSubmit);
      textarea.addEventListener("keydown", handleKeydown);
    }

    messageList = loadSessionStorage();
    if (messageList.length > 0) {
      header.classList.add("inactive");
      const thinking = houston.think();
      setTimeout(() => {
        thinking.stop();
        houston.emote("happy");
      }, 1250);
    }
    messageList.forEach((msg) => {
      if (msg.role === "user") {
        createBubble({ class: "message", "data-user": "" }, msg.content, true, false);
      } else if (msg.role === "assistant") {
        createBubble({ class: "message" }, msg.content, true, false);
      }
    });

    updateRegenerateButton();
  }

  async function handleRequest(_messageContent: string) {
    updateRegenerateButton();

    header.classList.add("inactive");
    const thinking = houston.think();

    if (streamedResponse()) {
        setStreamedResponse("");
    }
    
    isStreaming = false;
    currentStreamBubble = null;

    try {
      const timestamp = Date.now();
      const date = new Date(timestamp);
      const localDate = new Intl.DateTimeFormat(undefined, {
        year: "numeric", month: "2-digit", day: "2-digit", weekday: "long",
        hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: false,
      }).format(date);
      const updatedSystemRoleContent = `${systemRole.content} Current time: ${localDate}`;
      const requestMessageList = [
        { ...systemRole, content: updatedSystemRoleContent },
        ...messageList.slice(-7),
      ];

      const response = await fetch("/api", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          messages: requestMessageList,
          time: timestamp,
          temperature: 0.7,
          session_id: sessionId,
        }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error: ${response.status}`);
      }

      const data = response.body;
      if (!data) {
        throw new Error("No data");
      }

      const reader = data.getReader();
      const decoder = new TextDecoder("utf-8");
      let done = false;

      while (!done) {
        const { value, done: readerDone } = await reader.read();
        if (value) {
          const text = decoder.decode(value, { stream: true });
          setStreamedResponse((old) => old + text);
        }
        done = readerDone;
      }

      if (streamedResponse() && !streamedResponse().endsWith("[DONE]")) {
        emote = "happy";
        messageList.push({ role: "assistant", content: streamedResponse() });
      }
      setStreamedResponse("");
    } catch (err) {
      console.error(err);
      emote = "shocked";
      const error = err as ErrorMessage;
      const errorMessage = `Opps, something went wrong! ${error.message}`;

      messageList.push({ role: "assistant", content: errorMessage });
      createBubble({ class: "sources" }, errorMessage, false, true);
    } finally {
      thinking.stop();
      houston.emote(emote);
      setTimeout(() => houston.emote("default"), 1250);
      updateRegenerateButton();
    }
  }

  async function handleSubmit(event: Event) {
    event.preventDefault();
    if (houston.classList.contains("loading")) {
      return;
    }

    const textarea = document.getElementById("message") as HTMLTextAreaElement;
    let message = textarea.value;
    if (!message.trim()) {
      return;
    }

    messageList.push({ role: "user", content: message });
    createBubble({ class: "message", "data-user": "" }, message, true);

    textarea.value = "";
    textarea.blur();

    await handleRequest(message);
  }

  createEffect(() => {
    const responseMessage = streamedResponse();
    if (responseMessage) {
      if (!isStreaming) {
        createBubble({ class: "message" }, responseMessage, true, false);
        currentStreamBubble = messages.lastChild as HTMLElement;
        isStreaming = true;
      } else {
        if (currentStreamBubble) {
          currentStreamBubble.innerHTML = markdown(responseMessage);
        }
      }
    }
    if (responseMessage.endsWith("[DONE]")) {
      isStreaming = false;
    }
    if (currentStreamBubble) {
      currentStreamBubble.scrollIntoView({ behavior: "instant" });
      createCodeCopyButton(currentStreamBubble);
    }
  });

  function handleKeydown(event: Event) {
    const isMobile =
      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
        navigator.userAgent
      );
    if (isMobile) {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        const textarea = event.target;
        const cursorPosition = textarea.selectionStart;
        const textBeforeCursor = textarea.value.substring(0, cursorPosition);
        const textAfterCursor = textarea.value.substring(cursorPosition);
        textarea.value = textBeforeCursor + "\n" + textAfterCursor;
        textarea.selectionStart = textarea.selectionEnd = cursorPosition + 1;
      }
    } else {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        event.target.closest("form").requestSubmit();
      }
    }
  }

  window.addEventListener("beforeunload", updateSessionStorage);
</script>
