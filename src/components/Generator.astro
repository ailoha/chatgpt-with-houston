---
import SendIcon from "./icons/Send.astro"
---

<footer class="container">
  <form action="#" onsubmit="handleSubmit(event)">
    <div class="autogrow">
      <textarea
        id="message"
        name="message"
        onkeydown="handleKeydown(event)"
        oninput="this.parentNode.dataset.value = this.value"
        placeholder="Enter something... ( Shift+Enter for newline )"
        cols="30"></textarea>
      <button type="submit">
        <SendIcon />
      </button>
    </div>
  </form>
</footer>

<script>
  import { makeAskRequest, markdown } from "../util";

  const header = document.querySelector("header")!;
  const houston = document.querySelector("hey-houston")!;

  const h = (
    tag: string,
    props: Record<string, any> = {},
    ...children: any[]
  ) => {
    const node = document.createElement(tag);
    for (const [key, value] of Object.entries(props)) {
      node.setAttribute(key, value);
    }
    for (const child of children) {
      if (child instanceof Node) {
        node.appendChild(child);
      } else if (child || child === 0) {
        node.innerHTML = child;
      }
    }
    return node;
  };

  const messages = document.querySelector(".chat") as HTMLDivElement;

  let history = [];

  async function handleSubmit(event: Event) {
    event.preventDefault();
    if (houston.classList.contains("loading")) {
      return;
    }
    const form = event.target as HTMLFormElement;
    const textarea = form.message as HTMLTextAreaElement;
    let message = textarea.value;
    if (!message.trim()) {
      return;
    }

    history.push({ role: "user", content: message });

    const bubble = h(
      "li",
      { class: "message", "data-user": "" },
      markdown(message)
    );
    messages.appendChild(bubble);
    bubble.scrollIntoView();
    header.classList.add("inactive");

    textarea.value = "";
    textarea.blur();

    const thinking = houston.think();
    let emote: string = "default";

    try {
      const res = await makeAskRequest(message, history);

      if (res && res.answer) {
        const renderedResponse = markdown(res.answer);
        const bubble = h("li", { class: "sources" }, renderedResponse);
        messages.appendChild(bubble);
        bubble.scrollIntoView();
        emote = "happy";
        
        history.push({ role: "assistant", content: res.answer });

        if (history.length > 6) {
          history = history.slice(history.length - 6);
        }
      } else {
        emote = "disappointed";
        const bubble = h(
          "li",
          { class: "sources" },
          `No response.`
        );
        messages.appendChild(bubble);
        bubble.scrollIntoView();
      }
    } catch (err) {
      console.error(err);
      emote = "disappointed";
      const bubble = h(
        "li",
        { class: "sources" },
        `Something went wrong! Please try again.`
      );
      messages.appendChild(bubble);
      bubble.scrollIntoView();
    } finally {
      thinking.stop();
      houston.emote(emote);
      setTimeout(() => houston.emote("default"), 1250);
    }
  }

  function handleKeydown(event: KeyboardEvent) {
    if (event.shiftKey) return;
    if (event.key !== "Enter") return;
    event.preventDefault();
    (event.target as HTMLElement).closest("form")!.requestSubmit();
  }

  globalThis.handleSubmit = handleSubmit;
  globalThis.handleKeydown = handleKeydown;
</script>